<!--
  NOTE: This file will be included in auto-generated spring config file,
  so that no need to declare xml header and root element.
  And the encoding of this file is set to iso-8859-1.
-->

<!--
 DriverManagerDataSource provided by spring is just for develop & test.
 For product use, using container-managed data source and do a JNDI lookup.
-->

<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    <property name="url" value="jdbc:mysql://localhost/bookstore" />
    <property name="username" value="bookstore" />
    <property name="password" value="livebookstore" />
</bean>

<!-- Hibernate SessionFactory Bean using annotation -->

<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="annotatedClasses">
        <list>
            <value>com.crackj2ee.bookstore.domain.Account</value>
            <value>com.crackj2ee.bookstore.domain.Book</value>
            <value>com.crackj2ee.bookstore.domain.Category</value>
            <value>com.crackj2ee.bookstore.domain.Comment</value>
            <value>com.crackj2ee.bookstore.domain.FavoriteBook</value>
            <value>com.crackj2ee.bookstore.domain.Order</value>
            <value>com.crackj2ee.bookstore.domain.OrderItem</value>
        </list>
    </property>
    <property name="annotatedPackages">
        <list>
            <value>com.crackj2ee.bookstore.domain</value>
        </list>
    </property>
    <property name="hibernateProperties">
        <props>
            <prop key="hibernate.dialect">com.crackj2ee.bookstore.hibernate.CustomSQLDialect</prop>
            <prop key="hibernate.show_sql">true</prop>
            <prop key="hibernate.jdbc.fetch_size">10</prop>
            <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>
        </props>
    </property>
    <property name="eventListeners">
        <map>
            <entry key="pre-update">
                <bean class="org.hibernate.validator.event.ValidatePreUpdateEventListener" />
            </entry>
            <entry key="pre-insert">
                <bean class="org.hibernate.validator.event.ValidatePreInsertEventListener" />
            </entry>
        </map>
    </property>
</bean>

<!-- HibernateTemplate object shared in all DAO objects because it is thread-safe -->

<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
    <property name="sessionFactory" ref="sessionFactory" />
    <property name="fetchSize" value="10" />
</bean>

<!-- Transaction Manager -->

<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>

<!-- Using AOP transaction for BusinessService -->

<bean id="businessService" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
    <property name="target" ref="businessServiceTarget" />
    <property name="transactionManager" ref="transactionManager" />
    <property name="transactionAttributes">
        <props>
            <prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
            <prop key="*">PROPAGATION_REQUIRED</prop>
        </props>
    </property>
</bean>

<!--
###############################################################################
  Mail configuration
###############################################################################
-->

<bean id="jmsConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jms/factory" />
</bean>

<bean id="jmsQueue" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jms/queue" />
</bean>

<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp.crackj2ee.com" />
    <property name="port" value="25" />
    <property name="username" value="service@crackj2ee.com" />
    <property name="password" value="livebookstore" />
    <property name="defaultEncoding" value="UTF-8" />
    <property name="javaMailProperties">
        <props>
            <prop key="mail.smtp.auth">true</prop>
        </props>
    </property>
</bean>

<!--
###############################################################################
  Web mvc configuration
###############################################################################
-->

<bean id="openSessionInViewInterceptor" class="org.springframework.orm.hibernate3.support.OpenSessionInViewInterceptor">
    <property name="sessionFactory" ref="sessionFactory"/>
</bean>

<!-- URL Mapping: Bean Name URL Handler -->

<bean id="urlMapping" class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">
    <property name="interceptors">
        <list>
            <ref bean="autoLoginInterceptor" />
            <ref bean="performanceInterceptor" />
        </list>
    </property>
    <property name="alwaysUseFullPath" value="true" />
</bean>

<!-- Using CommonsUpload As File Upload Component -->

<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- 1MB -->
    <property name="maxUploadSize" value="1048576" />
</bean>

<!-- Using Velocity As View -->

<bean id="viewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
    <property name="contentType"><value>text/html;charset=UTF-8</value></property>
</bean>

<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
    <property name="configLocation" value="/WEB-INF/velocity.properties" />
    <property name="resourceLoaderPath" value="/" />
</bean>
