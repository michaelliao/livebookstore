<?xml version="1.0" encoding="UTF-8"?>
<project name="Building Live Online Bookstore" default="deploy" basedir=".">

    <description>Live Online Bookstore v1.0</description>

    <!-- 定义变量 -->
    <property name="src.dir"      value="src" />
    <property name="test.dir"     value="test" />
    <property name="doc.dir"      value="api-doc" />
    <property name="web.dir"      value="web" />
    <property name="lib.dir"      value="lib" />
    <property name="conf.dir"     value="conf" />
    <property name="gen.dir"      value="auto-gen" />
    <property name="build.dir"    value="${web.dir}/WEB-INF/classes" />
    <property name="report.dir"   value="${gen.dir}/report" />
    <property name="template.dir" value="template" />

    <!-- 定义classpath -->
    <path id="build-classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${build.dir}"/>
        <pathelement path="${src.dir}"/>
    </path>

    <!-- 清除class文件和所有自动生成的文件 -->
    <target name="clean">
        <delete dir="${gen.dir}" />
        <delete dir="${web.dir}/WEB-INF" />
        <delete dir="${doc.dir}" />
    </target>

    <!-- 初始化目录 -->
    <target name="pre-init" description="make dir">
        <mkdir dir="${web.dir}/WEB-INF/lib" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${doc.dir}" />
        <mkdir dir="${gen.dir}" />
        <mkdir dir="${report.dir}" />
    </target>

    <!-- 初始化配置文件 -->
    <target name="init" depends="pre-init" description="copy to web dir">
        <copy todir="${web.dir}/WEB-INF">
            <fileset file="${conf.dir}/*.*" />
        </copy>
        <copy todir="${web.dir}/WEB-INF/lib">
            <fileset file="${lib.dir}/core/*.jar" />
        </copy>
    </target>

    <!-- 编译java代码 -->
    <target name="build" depends="init">
        <!-- for product use, set: optimize="on" debug="off" -->
        <javac destdir="${build.dir}" target="1.5" encoding="utf-8" deprecation="on" debug="on" debuglevel="lines,vars,source">
            <src path="${src.dir}" />
            <src path="${test.dir}" />
            <classpath refid="build-classpath"/>
        </javac>
        <!-- copy non-java source files to build dir -->
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}" excludes="**/*.java" />
        </copy>
        <copy todir="${build.dir}">
            <fileset dir="${test.dir}" excludes="**/*.java" />
        </copy>
    </target>

    <!-- 使用XDoclet生成spring配置文件 -->
    <target name="gen-spring-conf" depends="build">
    	<taskdef name="springdoclet" classname="xdoclet.modules.spring.SpringDocletTask">
            <classpath refid="build-classpath"/>
    	</taskdef>
        <taskdef name="springdoclet2" classname="xdoclet.modules.spring.SpringDocletTask">
            <classpath refid="build-classpath"/>
        </taskdef>
        <!-- make spring service config file -->
        <springdoclet
            destDir="${web.dir}/WEB-INF"
            force="true"
            excludedtags="@version,@author,@todo"
        >
            <fileset dir="${src.dir}" includes="**/*.java" excludes="**/web/**/*.java" />
            <springxml
                xmlencoding="UTF-8"
                templateFile="${template.dir}/custom_spring_xml.xdt"
                destinationFile="services-import-beans.xml"
            />
        </springdoclet>
    	<!-- make spring mvc config file -->
        <springdoclet2
            destDir="${web.dir}/WEB-INF"
            force="true"
            excludedtags="@version,@author,@todo"
        >
            <fileset dir="${src.dir}" includes="**/web/**/*.java" />
            <springxml
                xmlencoding="UTF-8"
                templateFile="${template.dir}/custom_spring_xml.xdt"
                destinationFile="dispatcher-servlet-import-beans.xml"
            />
        </springdoclet2>
    </target>

    <!-- 运行junit测试 -->
    <target name="test" depends="build">
        <mkdir dir="${report.dir}"/>
        <delete file="${report.dir}/*.*" />
        <junit printsummary="on"
               haltonfailure="false"
               failureproperty="tests.failed"
               showoutput="true">
            <classpath refid="build-classpath" />
            <formatter type="plain"/>
            <batchtest todir="${report.dir}">
                <fileset dir="${build.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
        <fail if="tests.failed">
        ***********************************************************
        ****  One or more tests failed!  Check the output ...  ****
        ***********************************************************
        </fail>
    </target>

    <!-- 生成api doc -->
    <target name="apidoc" depends="init">
        <delete dir="${doc.dir}" />
    	<mkdir dir="${doc.dir}" />
        <javadoc packagenames="*"
            sourcepath="${src.dir}"
            destdir="${doc.dir}"
            locale="en_US"
            author="true"
            source="1.5"
            charset="UTF-8"
            encoding="UTF-8"
            docencoding="UTF-8"
            windowtitle="Live Bookstore API Documents"
        >
            <classpath refid="build-classpath"/>
            <bottom><![CDATA[<b>Live Bookstore v1.0</b>, <i>Copyright_2007, <a href="http://www.livebookstore.net" target="_blank">http://www.livebookstore.net</a>, all rights reserved.</i>]]></bottom>
        </javadoc>
    </target>

    <!-- 生成sql脚本用于创建数据库表 -->
    <target name="make-schema" depends="gen-spring-conf" description="create schema">
        <!-- 定义task -->
        <taskdef name="hibernatetool"
            classname="org.hibernate.tool.ant.HibernateToolTask">
            <classpath refid="build-classpath"/>
        </taskdef>
        <taskdef name="annotationconfiguration"
            classname="org.hibernate.tool.ant.AnnotationConfigurationTask">
            <classpath refid="build-classpath"/>
        </taskdef>
        <hibernatetool destdir="${gen.dir}">
            <classpath refid="build-classpath"/>
            <annotationconfiguration
                configurationfile="${conf.dir}/unused/hibernate.cfg.xml"/>
            <hbm2ddl
                export="false"
                drop="false"
                create="true"
                delimiter=";"
                outputfilename="schema.sql"
                destdir="${gen.dir}"
            />
        </hibernatetool>
    </target>

    <!-- 部署 -->
    <target name="deploy" depends="gen-spring-conf">
    </target>

</project>
